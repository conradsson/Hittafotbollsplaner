@model Hittafotbollsplaner.Models.fotbollsplaner

@{
    ViewBag.Title = "Edit";
}

@if (Request.IsAuthenticated)
{

if (@ViewBag.SuccessConfirm != null)
{
    @Html.Partial("_SuccessConfirmation")
}



                using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()

        <div class="ontoplook" style="margin-top: 1%;">
            <div class="form-horizontal">
                <div class="toppanel"><h3 class="panel-title text-center" style="margin-bottom: 2%; font-size:x-large;">Lägg till fotbollsplan</h3></div>


                <div class="container-generellinfo col-md-12">
                    <div class="genInfoSlide text-center">Generell information <span id="genInfoSlideIco" class="glyphicon glyphicon-chevron-down" aria-hidden="true"></span></div>
                    <div id="G-toggle">
                        <span class="glyphicon glyphicon-question-sign pull-right hjalpKnapp" aria-hidden="true" style="margin-right:2%; "><span class="hjalpText">Vänligen markera på kartan vart fotbollsplanen ligger, uppgifterna fylls då i automatiskt. Fyll sedan i det som saknas eller ändra det som är felaktigt. <br /><br /> Hemsida är ej obligatoriskt.</span></span>

                        <div class="col-md-6">
                            <div class="col-md-12" style="text-align: center;">
                                <label class="text-center" for="Karta">Klicka vart på kartan fotbollsplanen ligger<span class="red">*</span></label><br />
                            </div>
                            <div class="input-group">
                                <input id="sökinput" type="text" class="form-control controls" placeholder="Sök på adress eller namn..">
                                <span id="getPos" class="input-group-addon" title="Hitta min position"><img src="~/Content/img/loc.png" /></span>
                            </div>
                            <div class="col-md-12 col-kart">
                                @*<span id="getPosCre" class="btn btn-default"><img src="~/Content/img/loc.png" /></span>*@

                                <div id="googleMap" style="width:100%;height:323px;"></div>
                            </div>
                        </div>
                        <script>
                            var oldMarker;
                            var marker;

                            function myMap() {
                                var myCenter = new google.maps.LatLng(@Model.Latitud, @Model.Longitud);
                                var mapCanvas = document.getElementById("googleMap");
                                var mapOptions = {
                                    center: myCenter,
                                    zoom: 5,
                                    minZoom: 5,
                                    mapTypeId: google.maps.MapTypeId.TERRAIN,
                                    styles: [
{
    "featureType": "administrative.country",
    "elementType": "geometry.stroke",
    "stylers": [
      {
          "lightness": -65
      }
    ]
},
{
    "featureType": "administrative.province",
    "elementType": "geometry.stroke",
    "stylers": [
      {
          "lightness": -75
      }
    ]
},
{
    "featureType": "landscape.natural",
    "elementType": "geometry.fill",
    "stylers": [
      {
          "color": "#ffffff"
      }
    ]
},
{
    "featureType": "landscape.natural",
    "elementType": "geometry.stroke",
    "stylers": [
      {
          "color": "#00ff40"
      }
    ]
},
{
    "featureType": "landscape.natural.terrain",
    "elementType": "geometry.fill",
    "stylers": [
      {
          "lightness": -15
      }
    ]
},
{
    "featureType": "road.arterial",
    "elementType": "geometry.fill",
    "stylers": [
      {
          "lightness": -35
      }
    ]
},
{
    "featureType": "road.arterial",
    "elementType": "labels",
    "stylers": [
      {
          "visibility": "off"
      }
    ]
},
{
    "featureType": "road.highway",
    "elementType": "geometry.fill",
    "stylers": [
      {
          "color": "#8f8f8f"
      },
      {
          "lightness": -30
      },
      {
          "visibility": "off"
      }
    ]
},
{
    "featureType": "road.highway",
    "elementType": "geometry.stroke",
    "stylers": [
      {
          "color": "#a6a6a6"
      }
    ]
},
{
    "featureType": "road.highway",
    "elementType": "labels",
    "stylers": [
      {
          "visibility": "off"
      }
    ]
},
{
    "featureType": "road.local",
    "stylers": [
      {
          "visibility": "off"
      }
    ]
},
{
    "featureType": "water",
    "elementType": "geometry",
    "stylers": [
      {
          "lightness": -40
      }
    ]
},
{
    "featureType": "water",
    "elementType": "geometry.fill",
    "stylers": [
      {
          "lightness": 55
      }
    ]
}
                                    ]
                                };
                                var map = new google.maps.Map(mapCanvas, mapOptions);
                                var icon = {
                                    url: "/Content/img/marker2.png", // url
                                    scaledSize: new google.maps.Size(38, 56), // scaled size
                                    origin: new google.maps.Point(0, 0), // origin
                                    anchor: new google.maps.Point(26, 56) // anchor
                                };
                                var marker = new google.maps.Marker({
                                    position:myCenter,
                                    icon: icon
                                });
                                marker.setMap(map);

                                var options = {
                                    componentRestrictions: { country: "swe" }
                                };

                                var card = document.getElementById('input-group');
                                var input = document.getElementById('sökinput');

                                map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);

                                var autocomplete = new google.maps.places.Autocomplete(input, options);

                                // HITTA POSTION
                                $("span#getPos").click(function () {

                                    var myloc = new google.maps.Marker({
                                        clickable: false,
                                        icon: new google.maps.MarkerImage('//maps.gstatic.com/mapfiles/mobile/mobileimgs2.png',
                                                                                        new google.maps.Size(22, 22),
                                                                                        new google.maps.Point(0, 18),
                                                                                        new google.maps.Point(11, 11)),
                                        shadow: null,
                                        zIndex: 999,
                                        map: map
                                    });

                                    if (navigator.geolocation) navigator.geolocation.getCurrentPosition(function (pos) {
                                        var me = new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude);
                                        myloc.setPosition(me);
                                        map.panTo(me);
                                        map.setZoom(16);
                                    }, function (error) {
                                        // ...
                                    });

                                });

                                var geocoder = new google.maps.Geocoder();

                                google.maps.event.addListener(map, 'click', function (event) {
                                    placeMarker(event.latLng);
                                    var position = marker.getPosition();
                                    var latitude = position.lat();
                                    var longitude = position.lng();

                                    geocoder.geocode({
                                        'latLng': event.latLng
                                    }, function (results, status) {
                                        if (status == google.maps.GeocoderStatus.OK) {
                                            if (results[0]) {

                                                function capitalize(string) {
                                                    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                                                }

                                                var helaAdressen = results[0].formatted_address;
                                                var adress = helaAdressen.split(',')[0];
                                                capitalize(adress);
                                                var postnummerStad = helaAdressen.split(',')[1];
                                                var postnummer = postnummerStad.substring(1, 7);
                                                var stad = postnummerStad.substring(8);
                                                $('#adress').val(adress);
                                                $('#postnummer').val(postnummer);
                                                $('#ort').val(stad);
                                            }
                                        }
                                    });



                                    $('#lat1').val(latitude);
                                    $('#long1').val(longitude);
                                });
                                function placeMarker(location) {
                                    marker = new google.maps.Marker({
                                        position: location,
                                        icon: icon,
                                        map: map
                                    });

                                    if (oldMarker != undefined) {
                                        oldMarker.setMap(null);
                                    }
                                    oldMarker = marker;
                                    map.setCenter(location);
                                }
                                autocomplete.bindTo('bounds', map);

                                var infowindow = new google.maps.InfoWindow();
                                var infowindowContent = document.getElementById('infowindow-content');
                                infowindow.setContent(infowindowContent);
                                var marker1 = new google.maps.Marker({
                                    map: map,
                                    anchorPoint: new google.maps.Point(0, -29),
                                    animation: google.maps.Animation.BOUNCE
                                });
                                autocomplete.addListener('place_changed', function () {
                                    infowindow.close();
                                    var place = autocomplete.getPlace();
                                    if (!place.geometry) {
                                        // User entered the name of a Place that was not suggested and
                                        // pressed the Enter key, or the Place Details request failed.
                                        //window.alert("Ingen adress fanns med namnet: '" + place.name + "'");
                                        return;
                                    }
                                    // If the place has a geometry, then present it on a map.
                                    if (place.geometry.viewport) {
                                        map.fitBounds(place.geometry.viewport);
                                    } else {
                                        map.setCenter(place.geometry.location);
                                        map.setZoom(17);  // Why 17? Because it looks good.
                                    }
                                    marker1.setPosition(place.geometry.location);
                                    marker1.setVisible(true);


                                    var address = '';
                                    if (place.address_components) {
                                        address = [
                                          (place.address_components[0] && place.address_components[0].short_name || ''),
                                          (place.address_components[1] && place.address_components[1].short_name || ''),
                                          (place.address_components[2] && place.address_components[2].short_name || '')
                                        ].join(' ');
                                    }
                                    infowindowContent.children['place-icon'].src = place.icon;
                                    infowindowContent.children['place-name'].textContent = place.name;
                                    infowindowContent.children['place-address'].textContent = address;
                                    infowindow.open(map, marker1);
                                });
                            }
                        </script>

                        <div class="col-md-4">
                            <div class="col-md-offset-12" style="visibility:hidden;">.</div>
                            @Html.ValidationSummary(true, "", new { @class = "text-danger", required = "required" })

                            <div class="form-group">
                                <label class="control-label col-md-4" for="Namn">Namn<span class="red">*</span></label>
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.Namn, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Namn, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                <label class="control-label col-md-4" for="Adress">Adress<span class="red">*</span></label>
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.Adress, new { htmlAttributes = new { @class = "form-control", @id = "adress" } })
                                    @Html.ValidationMessageFor(model => model.Adress, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                <label class="control-label col-md-4" for="Postnummer">Postnummer<span class="red">*</span></label>
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.Postnummer, new { htmlAttributes = new { @class = "form-control", @id = "postnummer" } })
                                    @Html.ValidationMessageFor(model => model.Postnummer, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                <label class="control-label col-md-4" for="Ort">Ort<span class="red">*</span></label>
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.Ort, new { htmlAttributes = new { @class = "form-control", @id = "ort" } })
                                    @Html.ValidationMessageFor(model => model.Ort, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Hemsida, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.Hemsida, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Hemsida, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="form-group">
                                @Html.LabelFor(model => model.Latitud, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.Latitud, new { htmlAttributes = new { @class = "form-control", @id = "lat1" } })
                                    @Html.ValidationMessageFor(model => model.Latitud, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Longitud, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Longitud, new { htmlAttributes = new { @class = "form-control", @id = "long1" } })
                                    @Html.ValidationMessageFor(model => model.Longitud, "", new { @class = "text-danger" })
                                </div>
                            </div>


                        </div>
                        <div class="col-md-2"></div>
                    </div>
                </div>

                @{
                    List<SelectListItem> antalPlaner = new List<SelectListItem>();
                    antalPlaner.Add(new SelectListItem
                    {
                        Text = "0",
                        Value = "0"
                    });
                    antalPlaner.Add(new SelectListItem
                    {
                        Text = "1",
                        Value = "1",
                    });
                    antalPlaner.Add(new SelectListItem
                    {
                        Text = "2",
                        Value = "2",
                    });
                    antalPlaner.Add(new SelectListItem
                    {
                        Text = "3",
                        Value = "3",
                    });
                    antalPlaner.Add(new SelectListItem
                    {
                        Text = "4",
                        Value = "4",
                    });
                    antalPlaner.Add(new SelectListItem
                    {
                        Text = "5",
                        Value = "5",
                    });
                }

                <div class="container-planinfo col-md-12">
                    <div class="planInfoSlide text-center">Planinformation <span id="planInfoSlideIco" class="glyphicon glyphicon-chevron-down" aria-hidden="true"></span></div>
                    <div id="P-toggle">
                        <span class="glyphicon glyphicon-question-sign pull-right hjalpKnapp" aria-hidden="true" style="margin-right:2%;"><span class="hjalpText">Välj typ av fotbollsplan samt antal. Fritextrutan är till för extra information som du vill lämna, max 150 tecken får användas.</span></span>
                        <p class="text-primary text-center" style="left:0; margin-top: 2%; margin-left: 2%; margin-bottom:0;">Alla fotbollsplaner oavsett storlek räknas som fullstora. Specificera gärna storleken i fritexten.</p>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="control-label col-md-4" for="AntalGräs">Antal gräsplaner</label>
                                <div class="col-md-8">
                                    @Html.DropDownListFor(model => model.AntalGras, antalPlaner, null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.AntalGras, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-4" for="AntalGrus">Antal grusplaner</label>
                                <div class="col-md-8">
                                    @Html.DropDownListFor(model => model.AntalGrus, antalPlaner, null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.AntalGrus, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-4" for="AntalKonstGras">Antal konstgräsplaner</label>
                                <div class="col-md-8">
                                    @Html.DropDownListFor(model => model.AntalKonstGras, antalPlaner, null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.AntalKonstGras, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Fritext, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-8">
                                    @Html.TextAreaFor(model => model.Fritext, new { @rows = 5, })
                                    @Html.ValidationMessageFor(model => model.Fritext, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        @{
                            List<SelectListItem> jaNej = new List<SelectListItem>();
                            jaNej.Add(new SelectListItem
                            {
                                Value = "False",
                                Text = "-"

                            });
                            jaNej.Add(new SelectListItem
                            {
                                Value = "True",
                                Text = "Ja"

                            });
                            jaNej.Add(new SelectListItem
                            {
                                Value = "False",
                                Text = "Nej",

                            });
                            jaNej.Add(new SelectListItem
                            {
                                Value = "False",
                                Text = "Vet ej"

                            });
                        }
                    </div>
                </div>

                <div class="container-tillgängligt col-md-12">
                    <div class="tillgängligtSlide text-center">Tillgängligheter <span id="tillgängligtSlideIco" class="glyphicon glyphicon-chevron-down" aria-hidden="true"></span></div>
                    <div id="T-toggle">
                        <span class="glyphicon glyphicon-question-sign pull-right hjalpKnapp" aria-hidden="true" style="margin-right:2%;"><span class="hjalpText">Välj Ja alternativt Nej för respektive tillgänglighet på den aktuella fotbollsplanen.<br /><br />Om man är osäker på någon tillgänglighet,<br />välj då Nej.</span></span>
                        <p class="text-primary text-center" style="left:0; margin-top: 2%; margin-left: 2%; margin-bottom:0;">Dessa tillgängligheter gäller inom ett avstånd på 500 meter från fotbollsplanen/fotbollsplanerna.</p>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="control-label col-md-3" for="Parkering">Parkering<span class="red"></span></label>
                                <div class="col-md-9">
                                    @Html.DropDownListFor(model => model.Parkering, jaNej, null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Parkering, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-3" for="Omkladningsrum">Omklädningsrum<span class="red"></span></label>
                                <div class="col-md-9">
                                    @Html.DropDownListFor(model => model.Omkladnadsrum, jaNej, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Omkladnadsrum, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-3" for="Kafe">Kafé<span class="red"></span></label>
                                <div class="col-md-9">
                                    @Html.DropDownListFor(model => model.Kafe, jaNej, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Kafe, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="control-label col-md-3" for="Restaurang">Restaurang<span class="red"></span></label>
                                <div class="col-md-9">
                                    @Html.DropDownListFor(model => model.Restaurang, jaNej, null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Restaurang, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-3" for="Upplyst">Upplyst<span class="red"></span></label>
                                <div class="col-md-9">
                                    @Html.DropDownListFor(model => model.Upplyst, jaNej, null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Upplyst, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-3" for="Bokning">Bokning<span class="red"></span></label>
                                <div class="col-md-9">
                                    @Html.DropDownListFor(model => model.Bokning, jaNej, null, htmlAttributes: new { @class = "form-control bokninginput" })
                                    @Html.ValidationMessageFor(model => model.Bokning, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>



                @*<div class="form-group">*@
                <div class="col-md-offset-5 col-md-2">
                    <input type="submit" id="läggtillFP" value="Uppdatera" class="btn btn-default" style="width:100%; font-size: larger; background-color: #2ab74b;" />
                </div>
                <div class="col-md-5"></div>
                @*</div>*@
            </div>
            </div>

            }



            @*<div>
                    @Html.ActionLink("Back to List", "Index")
                </div>*@

            @section Scripts {
                @Scripts.Render("~/bundles/jqueryval")
            }


            <script src="http://maps.google.com/maps/api/js?sensor=false" type="text/javascript"></script>
            <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
            <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBdYS_UAzWfdbIIbydr7rIwpvqtKCUUEBY&language=sv&callback=myMap&libraries=places"></script>

            }
            else // EJ INLOGGAD

            {
            {
            ViewBag.Title = "Ej inloggad";
            }
            <div class="modal" style="display: block; background-color: rgba(0, 0, 0, 0.7);">
                <div class="modal-dialog">
                    <div class="modal-content ontoplook" style="margin-top: 35%;">
                        <div class="modal-header">
                            <h4 class="modal-title">Ej inloggad</h4>
                        </div>
                        <div class="modal-body">
                            <p>Vänligen logga in för att få tillgång till denna sida.</p>
                        </div>
                        <div class="modal-footer">
                            <input type="button" class="btn btn-success" value="Logga in" onclick="location.href='@Url.Action("Login", "Account")'" />
                        </div>
                    </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
            }
